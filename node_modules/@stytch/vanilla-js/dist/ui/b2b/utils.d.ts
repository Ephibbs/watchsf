/// <reference types="react" />
import { MutationFetcher, SWRMutationConfiguration } from 'swr/mutation';
import { B2BAuthenticateResponseWithMFA, B2BDiscoveryAuthenticateResponse, B2BMagicLinksDiscoveryAuthenticateResponse, StytchEventType, StytchB2BUIConfig, StytchProjectConfigurationInput } from '@stytch/core/public';
import { OrganizationBySlugMatch } from '@stytch/core/public';
import { Action } from './reducer';
declare const KeyToStytchEventMap: {
    'stytch.magicLinks.authenticate': StytchEventType.B2BMagicLinkAuthenticate;
    'stytch.sso.authenticate': StytchEventType.B2BSSOAuthenticate;
    'stytch.magicLinks.discovery.authenticate': StytchEventType.B2BMagicLinkDiscoveryAuthenticate;
    'stytch.discovery.organizations.create': StytchEventType.B2BDiscoveryOrganizationsCreate;
    'stytch.discovery.intermediateSessions.exchange': StytchEventType.B2BDiscoveryIntermediateSessionExchange;
    'stytch.magicLinks.email.loginOrSignup': StytchEventType.B2BMagicLinkEmailLoginOrSignup;
    'stytch.magicLinks.email.discovery.send': StytchEventType.B2BMagicLinkEmailDiscoverySend;
    'stytch.oauth.authenticate': StytchEventType.B2BOAuthAuthenticate;
    'stytch.oauth.discovery.authenticate': StytchEventType.B2BOAuthDiscoveryAuthenticate;
    'stytch.otps.sms.send': StytchEventType.B2BSMSOTPSend;
    'stytch.otps.sms.authenticate': StytchEventType.B2BSMSOTPAuthenticate;
    'stytch.totp.create': StytchEventType.B2BTOTPCreate;
    'stytch.totp.authenticate': StytchEventType.B2BTOTPAuthenticate;
    'stytch.recoveryCodes.recover': StytchEventType.B2BRecoveryCodesRecover;
    'stytch.impersonation.authenticate': StytchEventType.B2BImpersonationAuthenticate;
    'stytch.otps.email.authenticate': StytchEventType.B2BOTPsEmailAuthenticate;
    'stytch.otps.email.discovery.authenticate': StytchEventType.B2BOTPsEmailDiscoveryAuthenticate;
    'stytch.otps.email.discovery.send': StytchEventType.B2BOTPsEmailDiscoverySend;
    'stytch.otps.email.loginOrSignup': StytchEventType.B2BOTPsEmailLoginOrSignup;
    'stytch.organization.getBySlug': StytchEventType.B2BOrganizationsGetBySlug;
};
type StytchExternalMutationKey = keyof typeof KeyToStytchEventMap;
type StytchInternalMutationKey = `internal.${string}`;
export type StytchMutationKey = StytchExternalMutationKey | StytchInternalMutationKey;
export declare const useMutate: <TData, TError, TKey extends StytchMutationKey, TExtraArg = never>(key: TKey, fetcher: MutationFetcher<TData, TExtraArg, TKey>, options: SWRMutationConfiguration<TData, TError, TExtraArg, TKey>) => import("swr/mutation").SWRMutationResponse<TData, TError, TExtraArg, TKey>;
/**
 *
 * This hook triggers a request to retrieve the organization from the slug.
 * The hook only triggers the request if the SDK is being used in an organization flow,
 * and a slug pattern is present. The hook returns an isSearching boolean that can be used
 * to display a loading state while the search is in progress.
 */
export declare const useExtractSlug: () => {
    isSearching: boolean;
    slug: string | null;
    pattern: string | null | undefined;
};
export declare const useBootstrap: () => import("@stytch/core").BootstrapData;
export declare const onAuthenticateSuccess: (data: B2BAuthenticateResponseWithMFA<StytchProjectConfigurationInput>, dispatch: React.Dispatch<Action>, config: StytchB2BUIConfig) => void;
export declare const onDiscoveryAuthenticateSuccess: (data: B2BDiscoveryAuthenticateResponse | B2BMagicLinksDiscoveryAuthenticateResponse, dispatch: React.Dispatch<Action>) => void;
export declare const usePasswordInput: () => {
    stytch: import("../../b2b").StytchB2BUIClient<Partial<import("@stytch/core/public").StytchProjectConfiguration>>;
    onError: (error: import("@stytch/core/public").StytchSDKUIError) => void;
    email: string;
    setEmail: import("react").Dispatch<import("react").SetStateAction<string>>;
    password: string;
    setPassword: import("react").Dispatch<import("react").SetStateAction<string>>;
    organization: OrganizationBySlugMatch | null;
    errorMessage: string;
    setErrorMessage: import("react").Dispatch<import("react").SetStateAction<string>>;
    isSubmitting: boolean;
    setIsSubmitting: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    submitPassword: (organization_id: string) => void;
    submitDiscoveryPassword: () => void;
    handleNonMemberReset: () => void;
};
export declare const extractFromPattern: (pattern: string | null, href: string) => string | null;
export {};

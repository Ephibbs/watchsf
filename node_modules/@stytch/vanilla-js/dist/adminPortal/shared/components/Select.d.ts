import { SxProps, Theme } from '@mui/material';
import React, { MouseEventHandler, ReactNode } from 'react';
import { InjectedComponents } from './componentInjection';
import { OptionItem } from './types';
export declare const SelectContainer: import("@emotion/styled").StyledComponent<import("@mui/system").MUIStyledCommonProps<Theme> & {
    fullWidth?: boolean | undefined;
    readOnly?: boolean | undefined;
}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
type SelectItem = OptionItem & {
    Icon?: ReactNode;
    selected?: boolean;
    onClick?: MouseEventHandler<HTMLLIElement>;
    forceSelected?: boolean;
};
export type SelectCoreProps<U extends string | number | string[] | number[], TSelectItem> = {
    caption?: string;
    disabled?: boolean;
    fullWidth?: boolean;
    id?: string;
    label?: ReactNode;
    menuAnchorHorizontal?: 'left' | 'right' | 'center';
    selectItems: TSelectItem[];
    multiple?: boolean;
    onChange?: (value: U) => void;
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    value?: U | null;
    checkIconSx?: SxProps<Theme>;
    selectSx?: SxProps<Theme>;
};
export declare const SelectCore: <U extends string | number | string[] | number[], TSelectItem extends SelectItem>({ caption, disabled, fullWidth, id, label, menuAnchorHorizontal, selectItems, multiple, onChange, placeholder, readOnly, required, value, checkIconSx, selectSx, LabelComponent: Label, MenuItemComponent: MenuItem, TypographyComponent: Typography, }: SelectCoreProps<U, TSelectItem> & InjectedComponents<"Label" | "Typography"> & {
    MenuItemComponent: React.ComponentType<SelectItem | TSelectItem>;
}) => JSX.Element;
export {};

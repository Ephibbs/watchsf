import { StateChangeRegisterFunction } from '@stytch/core';
import { B2BState, IHeadlessB2BDiscoveryClient, IHeadlessB2BImpersonationClient, IHeadlessB2BMagicLinksClient, IHeadlessB2BMemberClient, IHeadlessB2BOrganizationClient, IHeadlessB2BOTPsClient, IHeadlessB2BPasswordClient, IHeadlessB2BRBACClient, IHeadlessB2BRecoveryCodesClient, IHeadlessB2BSCIMClient, IHeadlessB2BSelfClient, IHeadlessB2BSessionClient, IHeadlessB2BSSOClient, IHeadlessB2BTOTPsClient, StytchClientOptions, StytchProjectConfigurationInput } from '@stytch/core/public';
import { IWebB2BOAuthClient } from './HeadlessB2BOAuthClient';
/**
 * A headless client used for invoking Stytch's B2B APIs.
 * The Stytch Headless Client can be used as a drop-in solution for authentication and session management.
 * Full documentation can be found {@link https://stytch.com/docs/b2b/sdks/javascript-sdk online}.
 *
 * @example
 * const stytch = new StytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>');
 * stytch.magicLinks.email.loginOrCreate({
 *   email: 'sandbox@stytch.com',
 *   organization_id: 'organization-test-123',
 * });
 */
export declare class StytchB2BHeadlessClient<TProjectConfiguration extends StytchProjectConfigurationInput = Stytch.DefaultProjectConfiguration> {
    private readonly _subscriptionService;
    private readonly _sessionManager;
    private readonly _networkClient;
    private readonly _dataLayer;
    private readonly _stateChangeClient;
    magicLinks: IHeadlessB2BMagicLinksClient<TProjectConfiguration>;
    session: IHeadlessB2BSessionClient<TProjectConfiguration>;
    /** @deprecated Please use client.self instead. This will be removed in a future release. */
    member: IHeadlessB2BMemberClient;
    self: IHeadlessB2BSelfClient;
    organization: IHeadlessB2BOrganizationClient;
    oauth: IWebB2BOAuthClient<TProjectConfiguration>;
    sso: IHeadlessB2BSSOClient<TProjectConfiguration>;
    discovery: IHeadlessB2BDiscoveryClient<TProjectConfiguration>;
    passwords: IHeadlessB2BPasswordClient<TProjectConfiguration>;
    otps: IHeadlessB2BOTPsClient<TProjectConfiguration>;
    totp: IHeadlessB2BTOTPsClient<TProjectConfiguration>;
    recoveryCodes: IHeadlessB2BRecoveryCodesClient<TProjectConfiguration>;
    rbac: IHeadlessB2BRBACClient;
    scim: IHeadlessB2BSCIMClient;
    impersonation: IHeadlessB2BImpersonationClient;
    /**
     * Register a callback function to be invoked whenever certain state changes
     * occur, like a member or session object being updated.
     *
     * This is an alternative to more specific methods like `self.onChange` and
     * `session.onChange`. It can be helpful if you want to be notified of related
     * changes to different parts of state at once.
     *
     * If you are only interested in specific state changes, consider using more
     * specific methods like `self.onChange` and `session.onChange` instead.
     */
    onStateChange: StateChangeRegisterFunction<B2BState>;
    constructor(_PUBLIC_TOKEN: string, options?: StytchClientOptions);
}

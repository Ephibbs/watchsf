/// <reference types="react" />
import React from 'react';
import { ReactNode } from "react";
import { Member, MemberSession, Organization, StytchB2BUIClient } from '@stytch/vanilla-js/b2b';
import { StytchB2BHeadlessClient, StytchProjectConfigurationInput } from '@stytch/vanilla-js/b2b/headless';
import { PermissionsMap } from '@stytch/core/public';
/**
 * The Stytch Client object passed in to <StytchProvider /> in your `_app.js`.
 * Either a StytchUIClient or StytchHeadlessClient.
 */
type StytchB2BClient<TProjectConfiguration extends StytchProjectConfigurationInput> = StytchB2BHeadlessClient<TProjectConfiguration> | StytchB2BUIClient<TProjectConfiguration>;
type SWRMember = {
    member: null;
    fromCache: false;
    isInitialized: false;
} | {
    member: Member | null;
    fromCache: boolean;
    isInitialized: true;
};
type SWRMemberSession = {
    session: null;
    fromCache: false;
    isInitialized: false;
} | {
    session: MemberSession | null;
    fromCache: boolean;
    isInitialized: true;
};
type SWROrganization = {
    organization: null;
    fromCache: false;
    isInitialized: false;
} | {
    organization: Organization | null;
    fromCache: boolean;
    isInitialized: true;
};
declare const useIsMounted__INTERNAL: () => boolean;
declare const isUIClient: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration>>(client: StytchB2BClient<TProjectConfiguration>) => client is StytchB2BUIClient<TProjectConfiguration>;
/**
 * Returns the active member.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * See Next's {@link https://nextjs.org/docs/authentication#authenticating-statically-generated-pages documentation} for more.
 * @example
 * const {member, isInitialized, fromCache} = useStytchMember();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {member.name}</h1>);
 */
declare const useStytchMember: () => SWRMember;
/**
 * Returns the member's active Stytch member session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * See Next's {@link https://nextjs.org/docs/authentication#authenticating-statically-generated-pages documentation} for more.
 * @example
 * const {session, isInitialized, fromCache} = useStytchMemberSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
declare const useStytchMemberSession: () => SWRMemberSession;
/**
 * Returns the active Stytch organization.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * See Next's {@link https://nextjs.org/docs/authentication#authenticating-statically-generated-pages documentation} for more.
 * @example
 * const {organization, isInitialized, fromCache} = useStytchOrganization();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<p>Welcome to {organization.organization_name}</p>);
 */
declare const useStytchOrganization: () => SWROrganization;
type SWRIsAuthorized = {
    isAuthorized: boolean;
    fromCache: boolean;
    isInitialized: boolean;
};
/**
 * Determines whether the logged-in member is allowed to perform the specified action on the specified resource.
 * Returns `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, this method will always return false.
 * If the resource or action provided are not valid for the configured RBAC policy, this method will return false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * const isAuthorized = useStytchIsAuthorized<Permissions>('documents', 'edit');
 * return <button disabled={!isAuthorized}>Edit</button>
 */
declare const useStytchIsAuthorized: (resourceId: string, action: string) => SWRIsAuthorized;
/**
 * Returns the Stytch client stored in the Stytch context.
 *
 * @example
 * const stytch = useStytch();
 * useEffect(() => {
 *   stytch.magicLinks.authenticate('...')
 * }, [stytch]);
 */
declare const useStytchB2BClient: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration>>() => StytchB2BHeadlessClient<TProjectConfiguration>;
declare const withStytchB2BClient: <T extends object, TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration>>(Component: React.ComponentType<T & {
    stytch: StytchB2BHeadlessClient<TProjectConfiguration>;
}>) => React.ComponentType<T>;
declare const withStytchMember: <T extends object>(Component: React.ComponentType<T & {
    stytchMember: Member | null;
    stytchMemberIsInitialized: boolean;
    stytchMemberIsFromCache: boolean;
}>) => React.ComponentType<T>;
declare const withStytchMemberSession: <T extends object>(Component: React.ComponentType<T & {
    stytchMemberSession: MemberSession | null;
    stytchMemberSessionIsInitialized: boolean;
    stytchMemberSessionIsFromCache: boolean;
}>) => React.ComponentType<T>;
declare const withStytchOrganization: <T extends object>(Component: React.ComponentType<T & {
    stytchOrganization: Organization | null;
    stytchOrganizationIsInitialized: boolean;
    stytchOrganizationIsFromCache: boolean;
}>) => React.ComponentType<T>;
/**
 * Wrap your component with this HOC in order to receive the permissions for the logged-in member.
 * Evaluates all permissions granted to the logged-in member.
 * Returns a Record<RoleId, Record<Action, boolean>> response indicating the member's permissions.
 * Each boolean will be `true` if the member can perform the action, `false` otherwise.
 *
 * If the member is not logged in, all values will be false.
 *
 * Remember - authorization checks for sensitive actions should always occur on the backend as well.
 * @example
 * type Permissions = {
 *   document: 'create' | 'read' | 'write
 *   image: 'create' | 'read'
 * }
 *
 * const MyComponent = (props) => {
 *   const canEditDocuments = props.stytchPermissions.document.edit;
 *   const canReadImages = props.stytchPermissions.image.read;
 * }
 * return withStytchPermissions<Permissions>(MyComponent)
 */
declare const withStytchPermissions: <Permissions_1 extends Record<string, string>, T extends object>(Component: React.ComponentType<T & {
    stytchPermissions: PermissionsMap<Permissions_1>;
}>) => React.ComponentType<T>;
interface StytchB2BProviderProps<TProjectConfiguration extends StytchProjectConfigurationInput> {
    /**
     * A Stytch client instance, created using either {@link createStytchHeadlessClient} or {@link createStytchUIClient}
     */
    stytch: StytchB2BClient<TProjectConfiguration>;
    children?: ReactNode;
}
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in `_app.js` in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchB2BHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * return (
 *   <StytchB2BProvider stytch={stytch}>
 *     <App />
 *   </StytchB2BProvider>
 * )
 */
declare const StytchB2BProvider: <TProjectConfiguration extends Partial<import("@stytch/core/public").StytchProjectConfiguration>>({ stytch, children, }: StytchB2BProviderProps<TProjectConfiguration>) => JSX.Element;
export { useIsMounted__INTERNAL, isUIClient, useStytchMember, useStytchMemberSession, useStytchOrganization, useStytchIsAuthorized, useStytchB2BClient, withStytchB2BClient, withStytchMember, withStytchMemberSession, withStytchOrganization, withStytchPermissions, StytchB2BProviderProps, StytchB2BProvider };
